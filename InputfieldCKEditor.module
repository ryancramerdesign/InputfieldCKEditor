<?php

/**
 * ProcessWire Inputfield for CKEditor
 *
 * Web text editor for ProcessWire 2.2+
 *
 * CKEditor Copyright (C) 2003-2013, CKSource - Frederico Knabben
 * http://ckeditor.com
 *
 * ProcessWire Module Copyright (C) 2013 by Ryan Cramer 
 * http://processwire.com
 * 
 * Licensed under GNU/GPL v2
 * 
 *
 */

class InputfieldCKEditor extends InputfieldTextarea {

	public static function getModuleInfo() {
		return array(
			'title' => 'CKEditor',
			'version' => 100, 
			'summary' => __('CKEditor textarea rich text editor (beta module)', __FILE__),
			);
	}

	/**
	 * Placeholder that appears as the value in the hidden input used by inline mode
	 *
	 */
	const PLACEHOLDER_TEXT = ':IGNORE:';

	/**
	 * Default value for CK Editor extraPlugins config option
	 *
	 */
	const EXTRA_PLUGINS = 'pwimage,pwlink';
	
	/**
	 * Default value for CK Editor removePlugins config option
	 *
	 */
	const REMOVE_PLUGINS = 'image,link';

	/**
	 * Instance of MarkupHTMLPurifier module
	 *
	 */
	static $purifier = null;

	/**
	 * Names of JS config keys to avoid redundancy
 	 *
	 */
	static $configNames = array();

	/**
	 * Name of current JS config key
	 *
	 */
	protected $configName = '';

	/**
	 * Whether or not the globalConfig has run. This ensures it only runs once per request.
	 *
	 */
	static protected $isConfigured = false;

	/**
	 * Construct and set default configuration
	 *
	 */
	public function __construct() {
		parent::__construct();

		$this->set('inlineMode', 0); 

		$this->set('toolbar', '' . 
			"Format, Bold, Italic, -, RemoveFormat\n" . 
			"NumberedList, BulletedList, -, Blockquote\n" . 
			"PWLink, Unlink, Anchor\n" . 
			"PWImage, Table, HorizontalRule, SpecialChar\n" . 
			"PasteText, PasteFromWord\n" . 
			"Scayt, -, Source"
			); 

		$this->set('contentsCss', ''); 
		$this->set('extraPlugins', self::EXTRA_PLUGINS); 
		$this->set('removePlugins', self::REMOVE_PLUGINS); 
	}

	/**
	 * Given a toolbar config string, convert it to an array
	 *
	 * Toolbar items split by commas
	 * Groups of toolbar items split by lines
	 *
	 */
	protected function toolbarStringToArray($str) {
		$str = str_replace(' ', '', $str); 
		$items = array();
		$lines = explode("\n", $str); 
		foreach($lines as $line) {
			$line = trim($line);
			if(empty($line)) {
				$items[] = '/';
			} else {
				$lineArray = explode(',', $line); 
				$items[] = $lineArray; 
			}
		}
		return $items;
	}

	/**
	 * Render the output code for CKEditor
	 *
	 */
	public function ___render() {

		$this->globalConfig();
		$class = $this->className();
		$defaultContentsCss = wire('config')->urls->$class . '/contents.css'; 

		$config = array(
			'baseHref' => wire('config')->urls->root, 
			'contentsCss' => ($this->contentsCss ? $this->contentsCss : $defaultContentsCss),
			'extraPlugins' => $this->extraPlugins,
			'removePlugins' => $this->removePlugins,
			'toolbar' => $this->toolbarStringToArray($this->toolbar),
			'defaultLanguage' => $this->_('en'), // CKEditor language pack to use
			);

		// optimization to remember the name of our JS config entry to prevent redundancy in multi-lang fields
		if(!$this->configName) $this->configName = $this->className() . '_' . $this->name; 

		// optimization to prevent redundant configuration code when used in a repeater
		if(strpos($this->configName, '_repeater')) $this->configName = preg_replace('/_repeater\d+/', '', $this->configName); 
		if(!in_array($this->configName, self::$configNames)) $this->config->js($this->configName, $config); 
		self::$configNames[] = $this->configName; 

		return $this->inlineMode ? $this->renderInline() : $this->renderNormal();
	}

	/**
	 * Setup configuration specific to all instances rendered on the same page
	 *
	 * Primarily for language translation purposes
	 *
	 */
	protected function globalConfig() {
			
		if(self::$isConfigured) return;

		$this->config->scripts->add($this->config->urls->InputfieldCKEditor . "ckeditor/ckeditor.js"); 

		$cancelButtonLabel = $this->_('Cancel'); // Cancel button label

		$config = array(
			'language' => $this->_('en'), // 2 character language code, lowercase
			'pwlink' => array(
				'label' => $this->_('Insert Link'), // Insert link label, window headline and button text
				'cancel' => $cancelButtonLabel
				),
			'pwimage' => array(
				'selectLabel' => $this->_('Select Image'),
				'editLabel' => $this->_('Edit Image'),
				'savingNote' => $this->_('Saving Image'),
				'cancelBtn' => $cancelButtonLabel,
				'insertBtn' => $this->_('Insert This Image'),
				'selectBtn' => $this->_('Select Another Image')
				),
			);

		$this->config->js($this->className(), $config); 

		self::$isConfigured = true; 
	}

	/**
	 * Render the output code for CKEditor Normal Mode
	 *
	 */
	protected function renderNormal() {
		$out = parent::___render() . "<script>CKEDITOR.replace('$this->name', config.$this->configName);</script>";
		return $out; 
	}

	/**
	 * Render the output code for CKEditor Inline Mode
	 *
	 */
	protected function renderInline() {

		if(!wire('modules')->get('MarkupHTMLPurifier')) {
			$this->error($this->_('CKEditor inline mode requires the MarkupHTMLPurifier module. Using normal mode instead.')); 
			return $this->renderNormal();
		}

		$value = $this->attr('value'); 

		$out = 	"<div id='{$this->id}_ckeditor' class='InputfieldCKEditorInline' contenteditable='true' data-configName='$this->configName'>$value</div>" . 
			"<input type='hidden' name='$this->name' id='$this->id' value='" . self::PLACEHOLDER_TEXT . "' />";

		return $out; 
	}

	/**
	 * Process data submitted to a CKEditor field
	 *
	 * When inline mode is used, the content is run through HTML Purifier
	 *
	 */
	public function ___processInput(WireInputData $input) {

		$value = trim($input[$this->name]); 
		if($value == self::PLACEHOLDER_TEXT) return $this; // ignore value

		if($this->inlineMode && wire('modules')->isInstalled('MarkupHTMLPurifier')) {
			if(is_null(self::$purifier)) self::$purifier = wire('modules')->get('MarkupHTMLPurifier'); 
			$value = self::$purifier->purify($value); 		
		}

		// this value sometimes appears in CKEditor, and we don't want it
		if($value == "<p><br /></p>") $value = '';

		if($value != $this->attr('value')) {
			$this->trackChange('value');
			$this->setAttribute('value', $value); 	
		}

		return $this;
	}

	/*
	 * Inputfield configuration screen
	 *
	 */
	public function ___getConfigInputfields() {

		$inputfields = parent::___getConfigInputfields();

		$f = $inputfields->get('stripTags');
		if($f) $inputfields->remove($f);

		$f = $inputfields->get('placeholder');
		if($f) $inputfields->remove($f);

		$wrapper = wire('modules')->get('InputfieldFieldset'); 
		$wrapper->label = $this->_('CKEditor Settings'); 

		$f = wire('modules')->get('InputfieldTextarea'); 
		$f->attr('name', 'toolbar'); 
		$f->attr('value', $this->toolbar);
		$f->label = $this->_('CKEditor Toolbar'); 
		$f->description = $this->_('Separate each toolbar item with a comma. Group items by placing them on the same line and use a hyphen "-" where you want a separator to appear within a group. If you want more than one toolbar row, separate each row with a blank line.'); // Toolbar options description
		$wrapper->add($f); 

		$f = wire('modules')->get('InputfieldRadios'); 
		$f->attr('name', 'inlineMode'); 
		$f->label = $this->_('Editor Mode');
		$f->addOption(0, $this->_('Regular Editor')); 
		$f->addOption(1, $this->_('Inline Editor *')); 
		$f->attr('value', (int) $this->inlineMode); 
		$f->description = $this->_('When inline mode is enabled, the editor will not be loaded until you click in the text. This is more faster and more efficient when there are numerous CKEditor fields on the page. However, it may not support as many features or editor customizations as regular mode.'); // Mode selection description
		$f->notes = $this->_('*Inline mode requires that the HTML Purifier module is installed (MarkupHTMLPurifier).'); 
		if(wire('modules')->isInstalled('MarkupHTMLPurifier')) $f->notes = $this->_('*The required HTML Purifier module is installed.'); 
			else $f->notes .= "\n" . $this->_('WARNING: it is not currently installed. You should install it before enabling inline mode.'); 
		$wrapper->add($f); 

		$f = $this->modules->get("InputfieldText");
		$f->label = $this->_('Custom Editor CSS File');
		$f->description = $this->_("This option is only available in regular editor mode. Optionally specify a contents.css file URL (relative to your site root) and CKEditor will use this file for the editor rather than the default one in /site/modules/InputfieldCKEditor/contents.css."); // content.css description
		$f->notes = $this->_('Example: /site/templates/styles/contents.css');
		$f->attr('name', 'contentsCss');
		$value = $this->get('contentsCss');
		$f->collapsed = Inputfield::collapsedBlank;
		$f->attr('value', $value);
		$wrapper->add($f);

		$f = $this->modules->get("InputfieldText");
		$f->label = $this->_('Extra Plugins');
		$f->description = $this->_('Comma separated list of extra plugins that CKEditor should load.'); 
		$f->notes = $this->_('Example: pwlink,pwimage,myplugin,anotherplugin');
		$f->attr('name', 'extraPlugins');
		$value = $this->get('extraPlugins');
		$f->collapsed = ($value == self::EXTRA_PLUGINS ? Inputfield::collapsedYes : Inputfield::collapsedNo);
		$f->attr('value', $value);
		$wrapper->add($f);
		
		$f = $this->modules->get("InputfieldText");
		$f->label = $this->_('Remove Plugins');
		$f->description = $this->_('Comma separated list of removed plugins that CKEditor should not load.'); 
		$f->notes = $this->_('Example: link,image');
		$f->attr('name', 'removePlugins');
		$value = $this->get('removePlugins');
		$f->collapsed = ($value == self::REMOVE_PLUGINS ? Inputfield::collapsedYes : Inputfield::collapsedNo);
		$f->attr('value', $value);
		$wrapper->add($f);

		$inputfields->add($wrapper); 

		return $inputfields; 
	}
}
